Initial Setup of the /r/Python Discord Bot for Contribution
Description of Work
        Contribution to Free Open Source Software (FOSS) is an extremely important part of a programmers ability to learn knowledge. It can be a daunting task to replicate their technology stack on your own machine to get the environment running exactly as it would be within their systems without proper documentation. This instruction manual will aide to help users create a copy of the Bot on their system so that they are more readily able to help contribute to our project. We will assume a basic level of technical understanding and some pre-setup already, as most programmers have these created already; however, for those lacking the setup links to outside resources will be provided in our tools section.
Tools / Pre-Setup
There are a couple of steps that need to be done before you can actually download the bot, which will be covered in this setup.
* Creating a GitLab Account - GitLab is a version control system that allows people to remotely host their projects online and keep separate branches for each version so that if any changes are made, you can easily revert back as needed. It and GitHub are the most popular version control systems available online, so an account is necessary. Registration is easy at the following link - https://gitlab.com/users/sign_in .
* Generating an SSH Key - Having an SSH key allows you to remotely login to the GitLab service without supplying your username and password each time. It’s VERY important to keep this key secret, and not share it with anyone. This is an optional step, but it is a huge convenience and time saver over storing credentials for the website each time. There is an outside setup guide here - https://docs.gitlab.com/ee/ssh/
* Fork the Repo - In order to have your own repository to work off of, so you can keep your changes you need to create a copy of the project into a version you control. This can be done by clicking the fork button above the repo, additionally there is outside help here:
https://docs.gitlab.com/ee/gitlab-basics/fork-project.html .
* Python 3.6.5 - Python is the language our bot is written in, so it is very important to have this installed in order for code to actually run. Additionally the version must match that of our development version, as python versions release and mature this will likely change to the most recent version. It is recommended to check this publication periodically to ensure you’re using the correct python version. It is also important when installing, to ensure you select the option to add Python to your PATH variables, as this greatly increases the ease of use. The installer for 64bit windows can be found at the following link, the rest are easily downloadable from python.org https://www.python.org/ftp/python/3.6.5/python-3.6.5-amd64.exe .
* Git for Windows - Git for Windows is an application that allows easy use of the website features from the command line or a graphical interface. The core functions of any Git based system is the ability to clone, push, pull, and commit changes. This can be quite tedious if done manually, so using this tool decreases that complexity by a substantial amount - https://git-scm.com/ .
* Installing pip-env - pip-env is a utility to isolate your project from the outside world. This isolation allows you to freeze your libraries and other resources downloaded for Python without them being interfered with by an outside project. This is easily obtained by using the following command in command prompt:  py -3 -m pip install --user pipenv .
* Clone the bot - This step needs to be done after you have successfully forked the bot’s repository. Cloning creates a local copy for you to work from, which then allows you to push final changes for a version to the web service. Cloning can be accomplished, after installing Git for Windows, by using the following command in Command Prompt: “git clone  git@gitlab.com:<link to your repository online>”.
* Installing the dependencies for our bot - In order to run our bot, it is necessary to have all the dependencies. The steps to install these are as follows 1. Navigate to your directory the bot is held in with “cd C:/Path/To/Bot/Repository”, then “pipenv install”, then finally “pipenv shell”.
* Generate a Bot Token for Discord - The last step for setting up our bot environment is to generate a token to be used for our bot. This is created through the Discord developer portal here - https://discordapp.com/developers/applications/ .
* RabbitMQ - RabbitMQ is needed for the Bot to run. RabbitMQ allows messages or events to be sent from any subprocess and function to efficiently send the message between receivers. The install link is found here - https://www.rabbitmq.com/#getstarted .
* RethinkDB - The Bot also runs a website attached to it, which is located within the repository cloned earlier. This Website requires a database known as rethink to operate. Installation information can be found here - https://www.rethinkdb.com/ .
Bot Setup
After creation of the bot token, essentially a username and password, and installation of all the applications, it is time to move on to actually configuring the environment so the bot is actually able to be run. 
   1. Create a Discord Server - An isolated discord channel is required for creation of bot services, this is necessary so that you can test your changes to ensure they work without disturbing the nearly 7,000 members present on this server. Additionally, it stops people from interfering with progress. To create a Discord channel, click on the “+” sign at the bottom of the application, select create a new server, give it any name.
   2. Duplicate the channels and roles - A discord server is comprised of many channels. In order to ensure nothing will break when moved into the main bot’s repository, it is recommended to duplicate the roles and channel list from the main server. Creating a category, which is a group of channels, is done by right clicking on the left side panel of the newly created server and clicking “Create category” and giving it a name. Adding channels to each category is done by selecting the plus sign next to each category. Creating roles is done by selecting the upside down “^” at the top of the server, navigating to roles, and creating from that menu. 
   3. Modifying the yaml - The yaml file is the central setting dialog for all of the internals of the bot. This is a manual process, where the fields in the yaml config are replaced by values from the testing server. Each corresponding ID can be obtained with a right click on the element, and then selecting “Copy ID”. If this option is not available developer mode must be enabled through Discord by clicking on the cog wheel in the bottom left, then appearance, then enable developer mode. 
   4. Adding the bot to your server - In the developer portal, first disable the “Public” option. The Public option disallows users from adding the bot to their own server. This prevents people from adding a work in progress to unauthorized servers. After that, copy the “client ID” text field from the developer portal. Replace the angled brackets in the following URL with the bot’s client ID, and it will now join the server. https://discordapp.com/oauth2/authorize?client_id=<Client_ID>&scope=bot&permissions=8 . 
   5. Running the bot - The last step for running the bot requires commenting out the line of code with “config-default” in it, this is located within constants.py
Conclusion
The previous steps are all that is required to get the bot to a usable state. Running the bot with “py -3 -m bot” should successfully launch the bot without issue. Much of this information is to be outdated in the near future as myself and KnownError continue to work on the automation and streamline the process of making contributing to the bot an achievable feat without requiring 8 hours or more of setup.